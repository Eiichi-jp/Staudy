＠ユーザー情報登録
・git config --global user.name "つけたい名前"
・git config --global user.email "任意のメールアドレス入力"

＠ユーザー情報確認
・git config --list

＠現在の改行ルールを確認する
・git config --show-origin core.autocrlf
上記結果が「true」ならCRLF(windows向けの設定)
上記が「false」ならLF(リナックス向けの設定)←基本これがおススメ

＠上記改行ルールをLFに変更する
・git config --global core.autocrlf false

＠新しいディレクトリ作成
・git mkdir

＠新しいファイル作成
・git touch

＠現在までのパスを確認する
・pwd

＠現在のディレクトリ以下のフォルダ、ファイルを確認する
・ls

＠新しいリポジトリ作成
・git init
リポジトリ(作業場)にしたいフォルダで上記入力(リポジトリにしたフォルダの子フォルダ、子ファイルも対象)。
このフォルダ以下が作業する場所(ワーキングディレクトリ)になりここで作業をする。

＠githubと関連付けを行う
・git remote add origin "自分のgithubリポジトリのurl"

＠上記コマンドで登録できなければ以下で登録
※一度別の登録をしている場合できないらしい…
・git remote set-url origin "希望するgithubのurl貼り付け"

＠変更をステージングエリアに上げる(仮登録)
・git add "ファイル名、フォルダ名指定"
※ディレクトリの全ての変更を取り込む

＠git reset "ファイル名、ディレクトリ名"
・指定したファイル、ディレクトリーの状態を一つ前の状態に戻す
※ファイル名、ディレクトリを指定しないとステージングされている全てを一つ前に戻す

＠git checkout "ファイル名、ディレクトリ名"
・ワーキングディレクトリを一つ前の状態に戻す

＠git status
・現在のステージングエリアの状態を確認する

＠git status -s
・現在のステージングエリアの状態をgit statusより簡単に表示する
＠git commit
・ステージングされているファイル、ディレクトリをコミットする
・上記打ち込むとvimに移るためinsertキーで入力できる状態にし入力、入力が終わったらescキーを押し:wp(wは保存、pはvimを終了)を入力

＠git commit -m "メッセージ"
・ステージングされているファイル、ディレクトリをコミットする

＠git commit -a -m "メッセージ"
・現在のディレクトリでgit add、git commitを同時に行う

＠git reset HEAD
・最新のコミットを打ち消す

＠git log
・コミットの履歴を見ることが出来る

＠git log -1
・コミットの最新の履歴を一つだけ確認可能

＠git log --oneline
・コミットの履歴(メッセージのみ)を表示

＠git push origin master
・最新のコミットをgit remoteで選択したurlのリポジトリ(github)＝リモートリポジトリに送る
※origin：urlのリポジトリを指す
※masterは今いるブランチである

＠git clone
・リモートリポジトリのファイル、フォルダ等をすべて取り込む(自ディレクトリに複製を作成)

＠git pull
・リモートリポジトリとワーキングディレクトリの差異を取り込む

＠git diff
・ステージングとワーキングディレクトリを比較する。

＠git diff --cached
・最新のコミットとステージングエリアを比較する。

＠git diff HEAD
・最新のコミットとワーキングディレクトリを比較する。

＠git branch
・現在のブランチを確認する

＠git branch "ブランチ名"
・新しいブランチを作成する

＠git checkout "ブランチ名"
・ブランチを対象のブランチに切り替える

＠git branch -b "ブランチ名"
・新しいブランチを作成し作成したブランチに切り替える(checkoutをする手間を省く)

＠git merge "ブランチ名"
・現在のブランチと対象のブランチを統合する(変更点などをすべて取り込む)
※恐らくだがmasterブランチで実行されると思われる。
他の人が加えた変更などを管理者がmasterブランチを用いて取り込む。

＠コンフリクト(競合)
・コンフリクトはmergeする際に変更箇所が被った場合に発生する。
例)
　Aさん・・・B.txtの2行目を「こんにちわ」に変更
　Bさん・・・B.txt(Aと一緒)の2行目を「おはよう」に変更

上記の場合コンフリクトは発生する。
解決策としては現在のブランチの該当ファイルに被っている内容が表示されるためどちらかを消すかまたはどちらも消して変更するなどして被りを解消する。

＠コンフリクトの内容を確認
・git status
上記コマンドで確認可能。
「Unmerged paths:」以下内容が表示される

